import mongoose from "mongoose";
import config from "../../config";
import { TStudentData } from "../Student/student.interface";
import { academicServices } from "../academicSemester/academic.services";
import { AcademicModel } from "../academicSemester/academicSemModel";
import { Student } from "../Student/student.model";
import { TUser, newUser } from "./user.interface";
import { userModel } from "./user.model";
import { generatedStudentId } from "./user.utils";
import AppError from "../../errors/AppError";
import httpStatus from "http-status";

const createStudentIntDB = async (password: string, payload: TStudentData) => {
  //now we will call Student Model
  const userData: Partial<TUser> = {};
  if (!password) {
    userData.password = config.defaultPass as string;
  } else {
    userData.password = password;
  }

  //set the role
  userData.role = "student";
  //set the manually id
  const admissionSemester = await AcademicModel.findById(
    payload.admissionSemesterId
  );

  const session = await mongoose.startSession();
  try {
    session.startTransaction();
    //set generated by id function
    if (admissionSemester) {
      userData.id = await generatedStudentId(admissionSemester);
    } else {
      throw new Error("Not Found ID");
    }
    const newUser = await userModel.create([userData], { session }); // to get an array
    if (!newUser.length) {
      throw new AppError(httpStatus.BAD_REQUEST, "Failed to create a user");
    }
    payload.id = newUser[0].id;
    payload.user = newUser[0]._id; // reference ID

    const newStudent = await Student.create([payload], { session }); // to get an array

    if (!newStudent.length) {
      throw new AppError(httpStatus.BAD_REQUEST, "Failed to create student");
    }

    await session.commitTransaction();
    await session.endSession();

    return newStudent;
  } catch (err) {
    await session.abortTransaction();
    await session.endSession();
    throw new Error("Failed to create student");
  }
};
export const userService = {
  createStudentIntDB,
};
